// <auto-generated />
using GolfProductApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GolfProductApi.Migrations
{
    [DbContext(typeof(GolfProductDbContext))]
    [Migration("20180528181814_GolfProductDbInitial")]
    partial class GolfProductDbInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GolfProductApi.Entities.Catalog", b =>
                {
                    b.Property<short>("CatalogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("CatalogId");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasName("uidx_Catalog_Description");

                    b.ToTable("Catalogs");

                    b.HasData(
                        new { CatalogId = (short)1, Description = "US Catalog" },
                        new { CatalogId = (short)2, Description = "Japan Catalog" }
                    );
                });

            modelBuilder.Entity("GolfProductApi.Entities.CatalogCategory", b =>
                {
                    b.Property<short>("CatalogId");

                    b.Property<short>("CategoryId");

                    b.HasKey("CatalogId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CatalogCategory");

                    b.HasData(
                        new { CatalogId = (short)1, CategoryId = (short)1 },
                        new { CatalogId = (short)1, CategoryId = (short)2 },
                        new { CatalogId = (short)1, CategoryId = (short)3 },
                        new { CatalogId = (short)2, CategoryId = (short)1 },
                        new { CatalogId = (short)2, CategoryId = (short)2 }
                    );
                });

            modelBuilder.Entity("GolfProductApi.Entities.Category", b =>
                {
                    b.Property<short>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("CategoryId");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasName("uidx_Category_Description");

                    b.ToTable("Category");

                    b.HasData(
                        new { CategoryId = (short)1, Description = "Woods" },
                        new { CategoryId = (short)2, Description = "Irons" },
                        new { CategoryId = (short)3, Description = "Putters" }
                    );
                });

            modelBuilder.Entity("GolfProductApi.Entities.Family", b =>
                {
                    b.Property<int>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CategoryId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("FamilyId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasName("uidx_Family_Description");

                    b.ToTable("Family");

                    b.HasData(
                        new { FamilyId = 1, CategoryId = (short)1, Description = "Epic Drivers" },
                        new { FamilyId = 2, CategoryId = (short)1, Description = "Rogue Drivers" },
                        new { FamilyId = 3, CategoryId = (short)2, Description = "Epic Irons" },
                        new { FamilyId = 4, CategoryId = (short)2, Description = "Rogue Irons" },
                        new { FamilyId = 5, CategoryId = (short)2, Description = "Empty Family" },
                        new { FamilyId = 6, CategoryId = (short)3, Description = "Toulon Putter" }
                    );
                });

            modelBuilder.Entity("GolfProductApi.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("FamilyId");

                    b.Property<byte>("Gender");

                    b.Property<byte>("Hand");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.HasKey("ProductId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasName("uidx_Product_Sku");

                    b.ToTable("Products");

                    b.HasData(
                        new { ProductId = 1, Description = "Rogue 3 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)1, Sku = "Rogue3IronMR" },
                        new { ProductId = 2, Description = "Rogue 4 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)1, Sku = "Rogue4IronMR" },
                        new { ProductId = 3, Description = "Rogue 5 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)1, Sku = "Rogue5IronMR" },
                        new { ProductId = 4, Description = "Rogue 6 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)1, Sku = "Rogue6IronMR" },
                        new { ProductId = 5, Description = "Rogue 7 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)1, Sku = "Rogue7IronMR" },
                        new { ProductId = 6, Description = "Rogue 8 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)1, Sku = "Rogue8IronMR" },
                        new { ProductId = 7, Description = "Rogue 9 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)1, Sku = "Rogue9IronMR" },
                        new { ProductId = 8, Description = "Rogue 3-P Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)1, Sku = "Rogue3PIronMR" },
                        new { ProductId = 9, Description = "Rogue 5-P Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)1, Sku = "Rogue5PIronMR" },
                        new { ProductId = 10, Description = "Rogue 5 Iron", FamilyId = 4, Gender = (byte)2, Hand = (byte)1, Sku = "Rogue5IronWR" },
                        new { ProductId = 11, Description = "Rogue 6 Iron", FamilyId = 4, Gender = (byte)2, Hand = (byte)1, Sku = "Rogue6IronWR" },
                        new { ProductId = 12, Description = "Rogue 7 Iron", FamilyId = 4, Gender = (byte)2, Hand = (byte)1, Sku = "Rogue7IronWR" },
                        new { ProductId = 13, Description = "Rogue 8 Iron", FamilyId = 4, Gender = (byte)2, Hand = (byte)1, Sku = "Rogue8IronWR" },
                        new { ProductId = 14, Description = "Rogue 9 Iron", FamilyId = 4, Gender = (byte)2, Hand = (byte)1, Sku = "Rogue9IronWR" },
                        new { ProductId = 15, Description = "Rogue 5-P Iron", FamilyId = 4, Gender = (byte)2, Hand = (byte)1, Sku = "Rogue5PIronWR" },
                        new { ProductId = 16, Description = "Rogue 5 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)2, Sku = "Rogue5IronLM" },
                        new { ProductId = 17, Description = "Rogue 6 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)2, Sku = "Rogue6IronLM" },
                        new { ProductId = 18, Description = "Rogue 7 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)2, Sku = "Rogue7IronLM" },
                        new { ProductId = 19, Description = "Rogue 8 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)2, Sku = "Rogue8IronLM" },
                        new { ProductId = 20, Description = "Rogue 9 Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)2, Sku = "Rogue9IronLM" },
                        new { ProductId = 21, Description = "Rogue 5-P Iron", FamilyId = 4, Gender = (byte)1, Hand = (byte)2, Sku = "Rogue5PIronLM" },
                        new { ProductId = 22, Description = "Rogue 5 Iron", FamilyId = 4, Gender = (byte)2, Hand = (byte)2, Sku = "Rogue5IronLW" },
                        new { ProductId = 23, Description = "Rogue 7 Iron", FamilyId = 4, Gender = (byte)2, Hand = (byte)2, Sku = "Rogue7IronLW" },
                        new { ProductId = 24, Description = "Rogue 9 Iron", FamilyId = 4, Gender = (byte)2, Hand = (byte)2, Sku = "Rogue9IronLW" }
                    );
                });

            modelBuilder.Entity("GolfProductApi.Entities.CatalogCategory", b =>
                {
                    b.HasOne("GolfProductApi.Entities.Catalog", "Catalog")
                        .WithMany("CatalogCategories")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GolfProductApi.Entities.Category", "Category")
                        .WithMany("CatalogCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GolfProductApi.Entities.Family", b =>
                {
                    b.HasOne("GolfProductApi.Entities.Category", "Category")
                        .WithMany("Families")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GolfProductApi.Entities.Product", b =>
                {
                    b.HasOne("GolfProductApi.Entities.Family", "Family")
                        .WithMany("Products")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
